#====================================================================
  Sampler for Distribution Generated by Quantile Penalty
  - quantile penalty
  - pdf of distribution
  - cdf of distribution
  - inverse cdf of distribution
  - sample from this distribution
====================================================================#
#--------------------------------------------------------------------
# Quantile Penalty
#--------------------------------------------------------------------
function quantile(x::Float64,τ::Float64)
	# parameter domain check
	τ > 0 && τ < 1 || error("τ must between 0 and 1!");
	# apply penalty
	x < 0.0 ? val = -τ*x : val = (1-τ)*x;
	return val
end
#--------------------------------------------------------------------
# PDF of Distribution
#--------------------------------------------------------------------
function pdfQ(x::Float64,τ::Float64)
	return exp(-quantile(x,τ))*τ*(1-τ)
end
#--------------------------------------------------------------------
# CDF of Distribution
#--------------------------------------------------------------------
function cdfQ(x::Float64,τ::Float64)
	x < 0 ? val = (1-τ)*exp(τ*x) : val = 1-τ*exp((τ-1)*x);
	return val
end
#--------------------------------------------------------------------
# Inverse CDF of Distribution
#--------------------------------------------------------------------
function icdfQ(p::Float64,τ::Float64)
	p == 0.0  ? val = -Inf :
	p == 1.0  ? val =  Inf :
	p < (1-τ) ? val = log(p/(1-τ))/τ : val = log((1-p)/τ)/(τ-1);
	return val
end
#--------------------------------------------------------------------
# Sample Function for Distribution (only scalar case)
#--------------------------------------------------------------------
function sampleQ(τ::Float64)
	p = rand();
	return icdfQ(p,τ)
end